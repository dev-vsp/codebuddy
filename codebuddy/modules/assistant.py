
from .api import LMAPI
from .config import PROMPTS


class Assistant:

    """
    An AI assistant that interacts with a LM API to provide various types of reviews and responses.
    """

    def __init__(self, api_url: str = None) -> None:
        """
        Initializes the Assistant with an optional API URL.

        Args:
            api_url (str, optional): The URL of the LM API. If not provided, a default URL is used.
        """

        if api_url:
            self.lm_api = LMAPI(api_url)
        else:
            self.lm_api = LMAPI()

        self.prompts = PROMPTS

    def get_response(self, prompt: list) -> str:
        """
        Sends a prompt to the API client and returns the response.

        Args:
            prompt (list): A list of dictionaries representing the conversation prompt.

        Returns:
            str: The response received from the API.
        """

        response = self.lm_api.get_response(prompt)
        return response

    def review(self, category: str, data: str) -> str:
        """
        Generates a review for a given category based on the provided data by interacting with the LM API.

        Args:
            category (str): The type of review to generate.
            data (str): The input data or content that needs to be reviewed.

        Returns:
            str: The review generated by the LM API based on the provided category and data.
        """

        prompt = [
            {"role": "system", "content": self.prompts.get("sys")},
            {"role": "user", "content": self.prompts.get(category).format(data=data)}
        ]

        file_review = self.get_response(prompt=prompt)
        return file_review
